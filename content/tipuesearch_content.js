var tipuesearch = {"pages": [{'title': 'About', 'text': '\n 個人倉儲 \n 小組倉儲ag2 \n', 'tags': '', 'url': 'About.html'}, {'title': '相關連結', 'text': '課程倉儲 \n 電腦輔助設計與實習課堂筆記 \n', 'tags': '', 'url': '相關連結.html'}, {'title': 'exam', 'text': '利用自選的電腦輔助設計套件建立 \xa0 這個 \xa0中的零組件 (尺寸與操控內容自訂), 並加入感測器與適當的設計元件或機構, 說明預計如何令其在接上外部電源後, 能夠讓系統中的鋼球在軌道上進行永動模擬. \n 完成零組件與可行系統設計後, 請將零組件轉入 CoppeliaSim 建立模擬場景, 並在分組中自選另一名組員, 經過彼此討論後, 利用 ZMQ remote API Python 程式互相控制對方的永動模擬場景, 以便完成兩人一組的兩則永動機模擬操作 (若找不到協同對象, 請自行用所分配到的 IPv6 位址進行控制模擬). \n 完成上述兩人一組的現場操作考試後, 請利用 Wink 製作 MP4 操作影片, 說明從零組件繪圖至完成互動控制模擬後的各階段細節, 並將上述各項內容放入個人倉儲與網站 (頁面標題請用第一階設定, 名稱為 exam). \n', 'tags': '', 'url': 'exam.html'}, {'title': '製作步驟', 'text': '1. 基本零組件設計繪圖. \n \n **** 零件檔案 *** \n \n \n \n 2.施力機構設計, 納入軌道下方控制盒中 \n \n 3.將軌道、鋼球與簡化後的控制盒輸入 CoppeliaSim. \n \n', 'tags': '', 'url': '製作步驟.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'wink', 'text': '\n 設定 ffmpeg.exe 所在位置, 若使用隨身碟中的可攜程式系統, 可將 ffmpeg.exe 放在 data 目錄中, 並以 wink_ffmpeg.reg 進行設定, 也可將 Wink 的啟動與 start_ipv6.bat 進行整合. \n 開啟 Wink 新專案. \n 每按下一次 Pause 鍵, 可擷取操作過程中的畫面影格 (利用 Zoomit 放大所要強調的操作內容, 並以紅線框列). \n 操作錄製結束後, 從右下方的 Tray 中, 以滑鼠左鍵點選, 在 Wink 圖示中, 以滑鼠右鍵帶出 Finish Capture 按鍵, 點選後即可回到 Wink 專案區. \n 在每一頁影格中加入註解說明 TextBox 之前, 先利用 Project - Resize All Frames 將影格縮小至 1008 x630. \n 完成註解說明後, 可以逐一移動各頁面滑鼠游標位置, 並決定各頁面影片播放時的停留時間. \n 最後以 Render 按鈕進行轉檔, 並利用 View Rendered Output 檢視所建立的操作影片. \n \n \n', 'tags': '', 'url': 'wink.html'}, {'title': '網路設定', 'text': '由於電腦輔助設計室某部分套件, 在 IPv4 網路環境下會被防毒軟體偵測到封包異常而封閉網路, 因此以下將 IPv4 網路關閉, 僅使用 IPv6, 並透過雙網路協定支援的代理主機設定, 以便與僅支援 IPv4 的網路主機連線. \n 參考影片 \n', 'tags': '', 'url': '網路設定.html'}, {'title': '任務一', 'text': '鋼球墜落 \n 磁力吸引的鋼球循環運動系統, 參考-> \xa0 影片 \n 永動機(偽) \n', 'tags': '', 'url': '任務一.html'}, {'title': '檔案', 'text': 'CoppeliaSimEdu_4.5.1_rev4_for_cd2023 \xa0 \n 零件S \xa0 \n \n', 'tags': '', 'url': '檔案.html'}, {'title': '評分', 'text': '倉儲與網站評分項目: \n A: 是否 按照進度明確標示倉儲的改版歷程 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考 \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載 \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬 \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬 \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載 \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬 \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答 \n', 'tags': '', 'url': '評分.html'}, {'title': '教學影片 觀看後內容摘要', 'text': '教學影片 \n 1. 利用批次檔、登錄檔與 powershell 執行網路設定  透過批次檔（Batch File）、登錄檔（Registry）和 PowerShell，可以進行各種網路設定，在上課期間已ipv6作為主要途徑 \n 2. Onshape 零組件轉入 CoppeliaSim 記得以STL檔案通過CoppeliaSim讀取，並注意物件座標 \n 3. 從 github 空倉儲建立 cmsimde 網際內容管理倉儲 /之二  Github 全面要求使用 2FA \n 4. 利用 Pull Requests 提出修改 studlist 倉儲資料的用法 \n 5. 利用 SSH 協定取下倉儲並啟動編輯網站 /之二 \n 6. s.cycu.org 伺服器設定操作/之二-五 \n 7. Wink 操作說明 \n 8. 課程內容摘要簡報說明/之二 \n 9. 利用 ChatGPt 協助座位排序與列印問題 \n 10. 利用 Solvespace 繪製零組件並轉入 CoppeliaSim/之二 檔案使用.stl \n 11. 簡化後的專案一鋼球永動模擬操作/之二-四 \n 12. 專案二/之二、三', 'tags': '', 'url': '教學影片 觀看後內容摘要.html'}, {'title': '倉儲與網站評分', 'text': '我為我自己評分 \n (((G))) \n \n \xa0 透過這次模擬，我稍微掌握了使用 CoppeliaSim 進行模擬的基本步驟。我認為感測器的正確配置和調整是保證模擬精確性的重要一環。透過不斷觀察和調整，我得以獲取有價值的模擬結果，進一步改進我的模型和設定。這次 CoppeliaSim 模擬經驗不僅讓我稍微熟悉了仿真環境，也提升了我的問題解決和模型調整的能力。我期待進一步探索 CoppeliaSim 的功能，應用於更複雜的模擬場景中。', 'tags': '', 'url': '倉儲與網站評分.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};